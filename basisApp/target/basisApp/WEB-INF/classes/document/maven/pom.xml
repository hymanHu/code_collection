<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>com.livejournal.migration</groupId>
		<artifactId>migration</artifactId>
		<version>1.7.2-SNAPSHOT</version>
	</parent>

	<groupId>com.livejournal.server.migration</groupId>
	<artifactId>migrationui</artifactId>
	<packaging>war</packaging>
	<name>migrationui</name>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<org.springframework.version>3.0.5.RELEASE</org.springframework.version>
	</properties>

	<dependencies>
		<!-- servlet -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>
		<dependency>
			<groupId>taglibs</groupId>
			<artifactId>standard</artifactId>
			<version>1.1.2</version>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>2.5</version>
		</dependency>

		<!-- log -->
		<!-- 方式1 
			import org.slf4j.Logger; 
			import org.slf4j.LoggerFactory; 
			private static Logger logger = LoggerFactory.getLogger(ZkServiceImpl.class); 
		-->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>1.5.8</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>1.5.8</version>
		</dependency>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.16</version>
		</dependency>
		<!-- 方式2 
			import org.apache.commons.logging.Log; 
			import org.apache.commons.logging.LogFactory; 
			private final Log log = LogFactory.getLog(ConsoleController.class); 
		-->
		<dependency>
			<groupId>commons-logging</groupId>
			<artifactId>commons-logging</artifactId>
			<version>1.1.1</version>
		</dependency>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.16</version>
		</dependency>

		<!-- test -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.8.1</version>
			<scope>test</scope>
		</dependency>
		<!-- spring unit test -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- apache IO 工具包，提供了FileUtils IOUtils等读写文件的jar -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-io</artifactId>
			<version>1.3.2</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>

		<!-- spring MVC -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>
		
		<!-- spring 其他 hibernate支持 -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>
		
		<!-- spring JDBC -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>
		
		<!-- spring aop -->
		<!-- 集成AspectJ AspectJ LTW织入器 -->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
			<version>1.6.12</version>
		</dependency>
		<!-- 强大的Code生成类库, cglib用于AOP/Hibernate(实现PO字节码的动态生成) -->
		<dependency>
			<groupId>cglib</groupId>
			<artifactId>cglib</artifactId>
			<version>2.2</version>
			<exclusions>
				<!-- 封装的asm造成版本冲突 -->
				<exclusion>
					<groupId>org.ow2.asm</groupId>
					<artifactId>asm</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<!-- ASM是java字节码操纵和分析的框架, aop依赖asm实现动态代理 -->
		<dependency>
			<groupId>asm</groupId>
			<artifactId>asm</artifactId>
			<version>3.3.1</version>
		</dependency>
		<dependency>
			<groupId>asm</groupId>
			<artifactId>asm-commons</artifactId>
			<version>3.3.1</version>
		</dependency>
		<dependency>
			<groupId>asm</groupId>
			<artifactId>asm-util</artifactId>
			<version>3.3.1</version>
		</dependency>
		
		<!-- JSR-250,注解@Resource，相当于Spring的 @Autowired -->
		<dependency>
			<groupId>javax.annotation</groupId>
			<artifactId>jsr250-api</artifactId>
			<version>1.0</version>
		</dependency>

		<!-- json支持 -->
		<!-- 方式1 -->
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-core-asl</artifactId>
			<version>1.8.3</version>
		</dependency>
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-mapper-asl</artifactId>
			<version>1.8.3</version>
		</dependency>
		<!-- 方式2 -->
		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
			<version>1.7.1</version>
		</dependency>
		<!-- 3 -->
		<dependency>
			<groupId>org.json</groupId>
			<artifactId>json</artifactId>
			<version>20090211</version>
		</dependency>

		<!-- upload file -->
		<dependency>
			<groupId>commons-fileupload</groupId>
			<artifactId>commons-fileupload</artifactId>
			<version>1.3.3</version>
		</dependency>
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>1.4</version>
		</dependency>

		<!-- httpserver依赖 sun提供的httpserver包未放入jdk中，所以在导入com.sun.net.httpserver.HttpHandler时会有警告 
			直接用jboos提供的第三方jar，可实现同样功能 -->
		<dependency>
			<groupId>org.jboss.com.sun.httpserver</groupId>
			<artifactId>httpserver</artifactId>
			<version>1.0.1.Final</version>
		</dependency>
		
		<!-- httpclient, RestTemplate(两种http客户端运用) -->
		<dependency>
			<groupId>commons-httpclient</groupId>
			<artifactId>commons-httpclient</artifactId>
			<version>3.1</version>
			<type>jar</type>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- 主流数据库连接池(DBCP、c3p0、proxool)之一 ObjectPool运用 -->
		<dependency>
			<groupId>commons-dbcp</groupId>
			<artifactId>commons-dbcp</artifactId>
			<version>1.4</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>
		
		<!-- 主流数据库连接池(DBCP、c3p0、proxool)之一 c3p0运用 -->
		<dependency>
			<groupId>c3p0</groupId>
			<artifactId>c3p0</artifactId>
			<version>0.9.1.2</version>
		</dependency>

		<!-- mysql -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>5.1.17</version>
		</dependency>

		<!-- xml 转换对象 -->
		<dependency>
			<groupId>org.simpleframework</groupId>
			<artifactId>simple-xml</artifactId>
			<version>2.6.2</version>
		</dependency>

		<!-- dom4j -->
		<dependency>
			<groupId>dom4j</groupId>
			<artifactId>dom4j</artifactId>
			<version>1.6.1</version>
		</dependency>
		
		<!-- 提供了一些有用的包含static方法的Util类:ArrayUtils/StringUtils等 -->
		<dependency>
			<groupId>commons-lang</groupId>
			<artifactId>commons-lang</artifactId>
			<version>2.6</version>
		</dependency>
		
		<!-- java定时器 -->
		<dependency>
			<groupId>org.quartz-scheduler</groupId>
			<artifactId>quartz</artifactId>
			<version>2.1.3</version>
			<exclusions>
				<exclusion>
					<artifactId>c3p0</artifactId>
					<groupId>c3p0</groupId>
				</exclusion>
			</exclusions>
		</dependency>
		
		<!-- MongoDB java client -->
		<dependency>
			<groupId>org.mongodb</groupId>
			<artifactId>mongo-java-driver</artifactId>
			<version>2.7.3</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>
		
		<!-- memcached java client -->
		<dependency>
			<groupId>com.whalin</groupId>
			<artifactId>Memcached-Java-Client</artifactId>
			<version>3.0.1</version>
		</dependency>
		
		<!-- redis java client -->
		<dependency>
			<groupId>redis.clients</groupId>
			<artifactId>jedis</artifactId>
			<version>2.0.0</version>
		</dependency>
		
		<!-- hiberbate -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate</artifactId>
			<version>3.6.0.Beta2</version>
			<exclusions>
				<exclusion>
					<artifactId>jta</artifactId>
					<groupId>javax.transaction</groupId>
				</exclusion>
			</exclusions>
			<type>pom</type>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-annotations</artifactId>
			<version>3.5.6-Final</version>
		</dependency>
		
		<!-- hibernate 依赖包 -->
		<!-- 持久化，使用@Id、@Column等注解使数据库与实体类映射 -->
		<dependency>
			<groupId>javax.persistence</groupId>
			<artifactId>persistence-api</artifactId>
			<version>1.0</version>
		</dependency>
		<!-- 操作字节码,load返回代理对象，由该包生成的二进制码 -->
		<dependency>
			<groupId>javassist</groupId>
			<artifactId>javassist</artifactId>
			<version>3.12.1.GA</version>
		</dependency>
		
		<!-- spring & hiberbate validate -->
		<dependency>
			<groupId>javax.validation</groupId>
			<artifactId>validation-api</artifactId>
			<version>1.1.0.CR1</version>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
			<version>5.0.0.CR2</version>
		</dependency>
		
		<!-- 序列化对象文件 -->
		<dependency>
	  		<groupId>xstream</groupId>
	  		<artifactId>xstream</artifactId>
	  		<version>1.2.2</version>
	  	</dependency>
	  	
	  	<!-- webservice cxf框架 -->
	  	<dependency>
			<groupId>org.apache.cxf</groupId>
			<artifactId>apache-cxf</artifactId>
			<version>${cxf.version}</version>
			<type>pom</type>
		</dependency>
		
		<!-- 导出PDF文件 -->
		<dependency>
			<groupId>com.lowagie</groupId>
			<artifactId>itext</artifactId>
			<version>2.1.7</version>
		</dependency>
	</dependencies>

	<!-- 用于jenkins自动release版本，配合maven-release-plugin使用 -->
	<scm>
		<connection>scm:svn:https://svn.bulyon.com/repos/LJ11/trunk/framework/framework_commons</connection>
		<developerConnection>scm:svn:https://svn.bulyon.com/repos/LJ11/trunk/framework/framework_commons</developerConnection>
	</scm>
	<build>
		<!-- 设置源文件，这样源文件可以用${pom.name}等获取pom信息 -->
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>
		
		<!-- 配置单元测试resources文件夹 -->
		<testResources>
			<testResource>
				<directory>src/main/webapp</directory>
			</testResource>
		</testResources>

		<plugins>
			<!-- jenkins自动released插件，配合scm节点使用 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-release-plugin</artifactId>
				<version>2.3.2</version>
				<configuration>
					<tagNameFormat>@{project.artifactId}-@{project.version}</tagNameFormat>
					<tagBase>https://svn.bulyon.com/repos/LJ11/tags/framework/</tagBase>
				</configuration>
			</plugin>
			<!-- 处理资源文件 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.5</version>
				<configuration>
					<encoding>UTF-8</encoding>
				</configuration>
			</plugin>
			<!-- 编译java代码 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.0</version>
				<configuration>
					<source>1.6</source>
					<target>1.6</target>
					<encoding>UTF-8</encoding>
				</configuration>
			</plugin>
			<!-- maven install生成jar -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.4</version>
				<configuration>
					<excludes>
						<exclucde>*.properties</exclucde>
						<exclucde>*.xml</exclucde>
					</excludes>
				</configuration>
				<executions>
					<execution>
						<id>make-a-jar</id>
						<phase>compile</phase>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- 打zip包工具 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
				<version>2.2.1</version>
				<configuration>
					<descriptors>
						<descriptor>${project.basedir}/src/main/assembly/assembly.xml
						</descriptor>
					</descriptors>
				</configuration>
				<executions>
					<execution>
						<id>make-assembly</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- 默认一个java代码源和一个测试代码源，此插件指定多个源码目录 -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>1.2</version>
				<executions>
					<execution>
						<id>add-source</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>add-source</goal>
						</goals>
						<configuration>
							<sources>
								<source>src/main/java</source>
								<source>src/test/java</source>
								<source>src/integration/java</source>
							</sources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- webservice cxf插件，将wsdl转化为java代码 -->
			<plugin>
                <groupId>org.apache.cxf</groupId>
                <artifactId>cxf-codegen-plugin</artifactId>
                <version>${cxf.version}</version>
                <executions>
                    <execution>
                        <id>generate-sources</id>
                        <phase>generate-sources</phase>
                        <configuration>
                        	<sourceRoot>${project.build.directory}/generated/cxf</sourceRoot>
                            <wsdlOptions>
                                <wsdlOption>
                                    <wsdl>${weather.wsdl.file}</wsdl>
		                        	<serviceName>weatherWebservice</serviceName>
                                    <extendedSoapHeaders>true</extendedSoapHeaders>
                                </wsdlOption>
                            </wsdlOptions>
                        </configuration>
                        <goals>
                            <goal>wsdl2java</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
		</plugins>
		
		<!-- 插件管理 -->
		<pluginManagement>  
            <plugins>
            	<!-- 管理cxf插件 --> 
                <plugin>  
                    <groupId>org.eclipse.m2e</groupId>  
                    <artifactId>lifecycle-mapping</artifactId>  
                    <version>1.0.0</version>  
                    <configuration>  
                        <lifecycleMappingMetadata>  
                            <pluginExecutions>  
                                <pluginExecution>  
                                    <pluginExecutionFilter>  
                                        <groupId>  
                                            org.apache.cxf  
                                        </groupId>  
                                        <artifactId>  
                                            cxf-codegen-plugin  
                                        </artifactId>  
                                        <versionRange>  
                                            [2.1.4,)  
                                        </versionRange>  
                                        <goals>  
                                            <goal>wsdl2java</goal>  
                                        </goals>  
                                    </pluginExecutionFilter>  
                                    <action>  
                                        <ignore></ignore>  
                                    </action>  
                                </pluginExecution>  
                            </pluginExecutions>  
                        </lifecycleMappingMetadata>  
                    </configuration>  
                </plugin>  
            </plugins>  
        </pluginManagement>
	</build>

</project>